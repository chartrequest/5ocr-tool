#!/bin/bash
#
# 5ocr_tool v0.1.0
#

#Set some sane defaults
REGION=us-east-2
CONTAINER=web

usage() {
	echo "Usage:"
	echo "        5ocr-tool login"
        echo "        5ocr-tool logs --environment preproduction|staging --container web|sidekiq|cron"
        echo "        5ocr-tool ssh --environment preproduction|staging --container web|sidekiq|cron"
        echo "        5ocr-tool config --environment preproduction|staging --container web|sidekiq|cron"
        echo "        5ocr-tool db:connect --environment preproduction|staging"
}

urldecode() {
	: "${*//+/ }"
	echo -e "${_//%/\\x}"
}

do_login() {
	#Configure saml2aws if it has not been configured before
	if [ ! -f ~/.saml2aws ]; then
		saml2aws configure \
		--idp-provider=KeyCloak \
		--url=https://sso.chartrequest.com/auth/realms/ChartRequest/protocol/saml/clients/amazon-aws \
		--mfa=Auto \
		--profile=default \
		--skip-prompt >/dev/null
	fi

	saml2aws script &>/dev/null || saml2aws login --idp-account="default" --disable-keychain
	if [ $? -ne 0 ]; then
		echo "Username/password error, please try again."
		echo "If needed, you may reset your credentials on https://sso.chartrequest.com"
		exit 1
	else
		echo "Login successful, your temporary credentials have been stored"
		echo "in the ~/.aws/credentials file"
	fi
}

check_requisites() {
	if ! hash aws &>/dev/null; then
		echo "This tool requires the aws cli command to run"
		echo "To install it, follow the instructions at https://docs.aws.amazon.com/cli/latest/userguide/install-cliv1.html"
		exit 1
	fi
	if ! hash session-manager-plugin &>/dev/null; then
		echo "This tool requires the aws cli Session Manager Plugin"
		echo "To install it, follow the instructions at https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html#install-plugin-verify"
		exit 1
	fi
	if ! hash saml2aws &>/dev/null; then
		echo "This tool requires the saml2aws script."
		echo "To install it, follow the instructions at https://intranet.chartrequest.com/doku.php?id=development:howtoawskeys"
		exit 1
	fi
	if ! hash ecs-cli &>/dev/null; then
		echo "This tool requires the ecs-cli command."
		echo "To install it, follow the instructions at https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html"
		exit 1
	fi
	if ! hash jq &>/dev/null; then
		echo "This tool requires the jq command."
		echo "Install the corresponding system package. On Ubuntu, run 'sudo apt update; sudo apt install jq'"
		exit 1
	fi
	if ! hash psql &>/dev/null; then
		echo "This tool requires the psql command."
		echo "Install the corresponding system package. On Ubuntu, run 'sudo apt update; sudo apt install postgresql'"
		exit 1
	fi
}

check_login() {
	if ! aws sts get-caller-identity &>/dev/null; then
		echo "Your current AWS Key is not valid, run '5ocr-tool login' to obtain a temporary key"
		exit 1
	fi
}

get_container_instance_arn() {
	aws ecs describe-tasks \
		--cluster ${CLUSTER} \
		--region ${REGION} \
		--tasks $1 |
	jq -r '.tasks[].containerInstanceArn' || exit 1
}

get_ssm_instance_id() {
	aws ecs describe-container-instances \
		--region ${REGION} \
		--cluster ${CLUSTER} \
		--container-instances $1 |
	jq -r '.containerInstances[].ec2InstanceId' || exit 1
}

get_ssm_instance_address() {
	aws ssm describe-instance-information \
		--filters "Key=InstanceIds,Values=$1" | 
	jq -r '.InstanceInformationList[].IPAddress' || exit 1
}

get_caller_identity() {
	aws sts get-caller-identity|jq -r '.Arn' || exit 1
}

start_ssh() {

	case "$ENVIRONMENT" in
		'preproduction')
			aws ecs execute-command \
				--cluster ${CLUSTER} \
				--region ${REGION} \
				--task ${TASKID} \
				--container ${CONTAINERNAME} \
				--interactive \
				--command /bin/bash
		;;
		'staging')
			#Build the remote username based on the identity we assumed at login time
			u="$(get_caller_identity | sed 's/\(.*\)\/\([^\/]*\)$/\2/')@ad.chartrequest.com"
			# Get the container instance ARN
			CONTAINERINSTANCE=$(get_container_instance_arn ${TASKID})
			# Get the instance ID where the task is running
			INSTANCEID=$(get_ssm_instance_id ${CONTAINERINSTANCE})
			# Get the instance IP Address
			INSTANCEADDRESS=$(get_ssm_instance_address ${INSTANCEID})
			#Get the container name
			CONTAINERID=$(
				ssh -q -tt -l ${u} ${INSTANCEADDRESS} curl -s http://localhost:51678/v1/tasks | \
				jq -r ".Tasks[] | select (.KnownStatus==\"RUNNING\") | .Containers[] | select (.Name==\"${CONTAINERNAME}\").DockerName" \
			)
			echo "Containers are running on ${INSTANCEADDRESS}. Logging in..."
                        ssh -tt -l ${u} ${INSTANCEADDRESS} docker exec -ti ${CONTAINERID} /bin/bash
		;;
	esac
}

show_logs() {
	ecs-cli logs --region ${REGION} --cluster ${CLUSTER} --task-id ${TASKID} --container-name ${CONTAINERNAME}
}

get_config() {
	TASK_DEF=$(aws ecs describe-tasks --cluster ${CLUSTER} --tasks $TASKID |
		jq -r '.tasks[].taskDefinitionArn')
	CONFIG_FILE=$(aws ecs describe-task-definition --task-definition $TASK_DEF |
		jq -r ".taskDefinition.containerDefinitions[]| select(.name==\"${CONTAINERNAME}\") | .environmentFiles[].value" |
		cut -d":" -f6)
	aws s3 cp s3://${CONFIG_FILE} - | cat
}

connect_db() {
	re="^postgresq?l?://([^:]*)(:[^@]*@)([a-zA-Z0-9%\._\-]*)(:?[0-9]*)(/[a-zA-Z0-9_\-]*)\??(.*)$"
	[[ ${1} =~ ${re} ]]
	if [ $? -eq 0 ]; then
		export PGUSER=${BASH_REMATCH[1]}
		export PGPASSWORD=$(echo ${BASH_REMATCH[2]} | sed -e 's/^://' -e 's/@$//')
		export PGHOST=$(urldecode ${BASH_REMATCH[3]})
		export PGPORT=${BASH_REMATCH[4]#:}
		export PGDATABASE=${BASH_REMATCH[5]#/}
		psql
	fi
}

set_environment() {
	case "${ENVIRONMENT}" in
		'preproduction')
			CLUSTER=preprod
		;;
		'staging')
			CLUSTER=cr-staging
		;;
		*)
			echo "No such environment! Exiting..."
			exit 1
		;;
	esac

	
	if [ ${ENVIRONMENT} == 'preproduction' ]; then
		FAMILY="-${CONTAINER}"
	fi
	case "${CONTAINER}" in
		'web')
			if [ ${ENVIRONMENT} == 'preproduction' ]; then
				CONTAINERNAME=web
			else
				CONTAINERNAME=WebWorker
			fi
		;;
		'cron')
			CONTAINERNAME=CronWorker
		;;
		'sidekiq')
			CONTAINERNAME=SidekiqWorker
		;;
		*)
			echo "You must set web,cron or sidekiq as container family! Exiting..."
			exit 1
		;;
	esac

	#Get the task definition
	TASKID=$(aws ecs list-tasks --cluster ${CLUSTER} \
		--family 5ocr_app-${ENVIRONMENT}${FAMILY} \
		--desired-status RUNNING \
		--region ${REGION} | jq -r '.taskArns[]')
}


#First check if all the required utilities are present
check_requisites

#Then check if we are logged in
eval $(saml2aws script) &>/dev/null

#Parse command line options
TEMP=$(getopt -o 'e:c:h' --long 'environment:,container:,help' -n '5ocr-tool' -- "$@")

if [ $? -ne 0 ]; then
	echo 'Terminating...' >&2
	exit 1
fi

eval set -- "$TEMP"
unset TEMP

while true; do
	case "$1" in
		'-e'|'--environment')
			ENVIRONMENT=$2
			shift 2
			continue
		;;
		'-c'|'--container')
			CONTAINER=$2
			shift 2
			continue
		;;
		'-h'|'--help')
			shift 1
			usage
			exit 0
		;;
		'--')
			shift
			break
		;;
		*)
			usage
			exit 0
		;;
	esac
done

#Parse the main command
case "$1" in
	'login')
		do_login
	;;
	'ssh')
		check_login
		set_environment
		start_ssh
	;;
	'logs')
		check_login
		set_environment
		show_logs
	;;
	'config')
		check_login
		set_environment
		get_config
	;;
	'db:connect')
		check_login
		set_environment
		eval $(get_config | grep DATABASE_URL)
		connect_db ${DATABASE_URL}
	;;
	*)
		usage
		exit 1
	;;
esac

